AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for bootstrapping the CAPA controller role in your AWS account.

Parameters:
  InstallationName:
    Type: String
    Description: "The name of the management cluster."

  ByoVpc:
    Type: String
    Description: "If true, the CAPA role will be created without the permissions needed to manage VPCs"
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  GiantSwarmUserAccount:
    Type: String
    Description: "Account of Giant Swarm IAM users (`084190472784`, except for China). Assumed to be in the same partition as the CloudFormation stack account (`aws`, or `aws-cn` for China)."
    Default: "084190472784"
    # No `AllowedValues` here, since we don't publish the identifiers of other accounts
    AllowedPattern: "^[0-9]{12}$"
  ManagementClusterOidcProviderDomain:
    Type: String
    Description: "The OIDC domain of the management cluster, typically `irsa.<MC>.<base domain>`, for example `irsa.golem.gaws.gigantic.io`."
    AllowPattern: "^([0-9a-z-]+)(\\.[0-9a-z-]+)+$"

Conditions:
  # The policy is not needed in BYO VPC installations
  CreateVpcPolicy: !Equals
    - !Ref ByoVpc
    - "false"

Resources:
  GiantSwarmCapaControllerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "giantswarm-${InstallationName}-capa-controller"
      Description: "Giant Swarm managed role for k8s cluster creation"
      AssumeRolePolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:${AWS::Partition}:iam::${GiantSwarmUserAccount}:user/${InstallationName}-capa-controller"
              },
              "Action": "sts:AssumeRole"
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "arn:${AWS::Partition}:iam::${AWS::AccountId}:oidc-provider/${ManagementClusterOidcProviderDomain}"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "ForAnyValue:StringEquals": {
                  "${ManagementClusterOidcProviderDomain}:sub": [
                    "system:serviceaccount:crossplane:upbound-provider-aws",
                    "system:serviceaccount:crossplane:upbound-provider-aws-importer",
                    "system:serviceaccount:crossplane:xfn-network-discovery"
                  ]
                }
              }
            }
          ]
        }
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

  GiantSwarmCapaControllerManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "giantswarm-${InstallationName}-capa-controller-policy"
      Description: "Giant Swarm managed policy for k8s cluster creation"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:AllocateAddress"
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:CreateSecurityGroup"
              - "ec2:CreateTags"
              - "ec2:DeleteNetworkInterface"
              - "ec2:DeleteSecurityGroup"
              - "ec2:DeleteTags"
              - "ec2:DetachNetworkInterface"
              - "ec2:DescribeAccountAttributes"
              - "ec2:DescribeAddresses"
              - "ec2:DescribeAvailabilityZones"
              - "ec2:DescribeDhcpOptions"
              - "ec2:DescribeInstances"
              - "ec2:DescribeInstanceTypes"
              - "ec2:DescribeInternetGateways"
              - "ec2:DescribeImages"
              - "ec2:DescribeNatGateways"
              - "ec2:DescribeNetworkInterfaces"
              - "ec2:DescribeNetworkInterfaceAttribute"
              - "ec2:DescribeRouteTables"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeSecurityGroupRules"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeVpcs"
              - "ec2:DescribeVpcAttribute"
              - "ec2:DescribeVpcEndpoints"
              - "ec2:DescribeVolumes"
              - "ec2:DisassociateAddress"
              - "ec2:ModifyInstanceAttribute"
              - "ec2:ModifyNetworkInterfaceAttribute"
              - "ec2:ReleaseAddress"
              - "ec2:RevokeSecurityGroupIngress"
              - "ec2:RevokeSecurityGroupEgress"
              - "ec2:RunInstances"
              - "ec2:TerminateInstances"
              - "tag:GetResources"
              - "elasticloadbalancing:*"
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeInstanceRefreshes"
              - "autoscaling:SuspendProcesses"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
              - "autoscaling:DeleteLifecycleHook"
              - "autoscaling:DescribeLifecycleHooks"
              - "autoscaling:PutLifecycleHook"
              - "ec2:CreateLaunchTemplate"
              - "ec2:CreateLaunchTemplateVersion"
              - "ec2:DescribeLaunchTemplates"
              - "ec2:DescribeLaunchTemplateVersions"
              - "ec2:DeleteLaunchTemplate"
              - "ec2:DeleteLaunchTemplateVersions"
              - "s3:CreateBucket"
              - "s3:DeleteBucket"
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
              - "s3:PutBucketPolicy"
              - "s3:ListBucket"
              - "s3:PutBucketAcl"
              - "s3:PutLifecycleConfiguration"
              - "s3:PutBucketOwnershipControls"
              - "s3:PutBucketTagging"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "autoscaling:CancelInstanceRefresh"
              - "autoscaling:CreateAutoScalingGroup"
              - "autoscaling:UpdateAutoScalingGroup"
              - "autoscaling:CreateOrUpdateTags"
              - "autoscaling:StartInstanceRefresh"
              - "autoscaling:DeleteAutoScalingGroup"
              - "autoscaling:DeleteTags"
            Resource: "arn:*:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/*"
          - Effect: "Allow"
            Action:
              - "iam:CreateServiceLinkedRole"
            Resource: "arn:*:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
            Condition:
              StringLike:
                "iam:AWSServiceName": "autoscaling.amazonaws.com"
          - Effect: "Allow"
            Action:
              - "iam:CreateServiceLinkedRole"
            Resource: "arn:*:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing"
            Condition:
              StringLike:
                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
          - Effect: "Allow"
            Action:
              - "iam:CreateServiceLinkedRole"
            Resource: "arn:*:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot"
            Condition:
              StringLike:
                "iam:AWSServiceName": "spot.amazonaws.com"
          - Effect: "Allow"
            Action:
              - "iam:PassRole"
            Resource: "arn:*:iam::*:role/*.cluster-api-provider-aws.sigs.k8s.io"
          - Effect: "Allow"
            Action:
              - "secretsmanager:CreateSecret"
              - "secretsmanager:DeleteSecret"
              - "secretsmanager:TagResource"
            Resource: "arn:*:secretsmanager:*:*:secret:aws.cluster.x-k8s.io/*"
          - Effect: "Allow"
            Action:
              - "iam:ListOpenIDConnectProviders"
              - "iam:CreateOpenIDConnectProvider"
              - "iam:AddClientIDToOpenIDConnectProvider"
              - "iam:UpdateOpenIDConnectProviderThumbprint"
              - "iam:DeleteOpenIDConnectProvider"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "events:DeleteRule"
              - "events:DescribeRule"
              - "events:ListTargetsByRule"
              - "events:PutRule"
              - "events:PutTargets"
              - "events:RemoveTargets"
              - "sqs:CreateQueue"
              - "sqs:DeleteMessage"
              - "sqs:DeleteQueue"
              - "sqs:GetQueueAttributes"
              - "sqs:GetQueueUrl"
              - "sqs:ReceiveMessage"
              - "sqs:SetQueueAttributes"
            Resource: "*"
      Roles:
        - !Ref GiantSwarmCapaControllerRole
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

  GiantSwarmCapaControllerVpcManagedPolicy:
    Condition: CreateVpcPolicy
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "giantswarm-${InstallationName}-capa-controller-vpc-policy"
      Description: "Giant Swarm managed policy for k8s cluster creation"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:AssociateRouteTable"
              - "ec2:AssociateVpcCidrBlock"
              - "ec2:AttachInternetGateway"
              - "ec2:CreateInternetGateway"
              - "ec2:CreateNatGateway"
              - "ec2:CreateRoute"
              - "ec2:CreateRouteTable"
              - "ec2:CreateSubnet"
              - "ec2:CreateVpc"
              - "ec2:CreateVpcEndpoint"
              - "ec2:ModifyVpcAttribute"
              - "ec2:ModifyVpcEndpoint"
              - "ec2:DeleteInternetGateway"
              - "ec2:DeleteNatGateway"
              - "ec2:DeleteRouteTable"
              - "ec2:DeleteSubnet"
              - "ec2:DeleteVpc"
              - "ec2:DeleteVpcEndpoints"
              - "ec2:DetachInternetGateway"
              - "ec2:DisassociateRouteTable"
              - "ec2:DisassociateVpcCidrBlock"
              - "ec2:ModifySubnetAttribute"
              - "ec2:ReplaceRoute"
            Resource: "*"
      Roles:
        - !Ref GiantSwarmCapaControllerRole
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

  GiantSwarmDNSControllerManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "giantswarm-${InstallationName}-dns-controller-policy"
      Description: "Giant Swarm managed policy for k8s cluster creation"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "route53:*"
              - "route53domains:*"
              - "route53resolver:*"
            Resource: "*"
      Roles:
        - !Ref GiantSwarmCapaControllerRole
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

  GiantSwarmCrossplaneManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "giantswarm-${InstallationName}-crossplane-policy"
      Description: "Giant Swarm managed policy for k8s cluster creation"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:AuthorizeSecurityGroupEgress"
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:CreateSecurityGroup"
              - "ec2:DeleteSecurityGroup"
              - "ec2:DescribeSecurityGroupRules"
              - "ec2:DescribeSecurityGroups"
              - "ec2:RevokeSecurityGroupEgress"
              - "ec2:RevokeSecurityGroupIngress"
              - "cloudwatch:*"
              - "sqs:*"
              - "events:*"
            Resource: "*"
      Roles:
        - !Ref GiantSwarmCapaControllerRole
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

  GiantSwarmEKSControllerManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "giantswarm-${InstallationName}-eks-controller-policy"
      Description: "Giant Swarm managed policy for k8s cluster creation"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "ssm:GetParameter"
            Resource: "arn:*:ssm:*:*:parameter/aws/service/eks/optimized-ami/*"
          - Effect: "Allow"
            Action: "iam:CreateServiceLinkedRole"
            Resource: "arn:*:iam::*:role/aws-service-role/eks.amazonaws.com/AWSServiceRoleForAmazonEKS"
            Condition:
              StringLike:
                "iam:AWSServiceName": "eks.amazonaws.com"
          - Effect: "Allow"
            Action: "iam:CreateServiceLinkedRole"
            Resource: "arn:*:iam::*:role/aws-service-role/eks-nodegroup.amazonaws.com/AWSServiceRoleForAmazonEKSNodegroup"
            Condition:
              StringLike:
                "iam:AWSServiceName": "eks-nodegroup.amazonaws.com"
          - Effect: "Allow"
            Action: "iam:CreateServiceLinkedRole"
            Resource: "arn:*:iam::*:role/aws-service-role/eks-fargate-pods.amazonaws.com/AWSServiceRoleForAmazonEKSForFargate"
            Condition:
              StringLike:
                "iam:AWSServiceName": "eks-fargate.amazonaws.com"
          - Effect: "Allow"
            Action:
              - "iam:GetRole"
              - "iam:ListAttachedRolePolicies"
            Resource: "arn:*:iam::*:role/*"
          - Effect: "Allow"
            Action: "iam:GetPolicy"
            Resource:
              - "arn:*:iam::*:policy/AmazonEKSClusterPolicy"
              - "arn:*:iam::*:policy/AmazonEKSWorkerNodePolicy"
              - "arn:*:iam::*:policy/AmazonEKS_CNI_Policy"
              - "arn:*:iam::*:policy/AmazonEC2ContainerRegistryReadOnly"
          - Effect: "Allow"
            Action:
              - "eks:DescribeCluster"
              - "eks:ListClusters"
              - "eks:CreateCluster"
              - "eks:TagResource"
              - "eks:UpdateClusterVersion"
              - "eks:DeleteCluster"
              - "eks:UpdateClusterConfig"
              - "eks:UntagResource"
              - "eks:UpdateNodegroupVersion"
              - "eks:DescribeNodegroup"
              - "eks:DeleteNodegroup"
              - "eks:UpdateNodegroupConfig"
              - "eks:CreateNodegroup"
              - "eks:AssociateEncryptionConfig"
              - "eks:ListIdentityProviderConfigs"
              - "eks:AssociateIdentityProviderConfig"
              - "eks:DescribeIdentityProviderConfig"
              - "eks:DisassociateIdentityProviderConfig"
            Resource:
              - "arn:*:eks:*:*:cluster/*"
              - "arn:*:eks:*:*:nodegroup/*/*/*"
          - Effect: "Allow"
            Action:
              - "ec2:AssociateVpcCidrBlock"
              - "ec2:DisassociateVpcCidrBlock"
              - "eks:ListAddons"
              - "eks:CreateAddon"
              - "eks:DescribeAddonVersions"
              - "eks:DescribeAddon"
              - "eks:DeleteAddon"
              - "eks:UpdateAddon"
              - "eks:TagResource"
              - "eks:DescribeFargateProfile"
              - "eks:CreateFargateProfile"
              - "eks:DeleteFargateProfile"
              - "eks:ListIdentityProviderConfigs"
              - "eks:DescribeIdentityProviderConfig"
            Resource: "*"
          - Effect: "Allow"
            Action: "iam:PassRole"
            Resource: "*"
            Condition:
              StringEquals:
                "iam:PassedToService": "eks.amazonaws.com"
          - Effect: "Allow"
            Action:
              - "kms:CreateGrant"
              - "kms:DescribeKey"
            Resource: "*"
            Condition:
              ForAnyValue:StringLike:
                "kms:ResourceAliases": "alias/cluster-api-provider-aws-*"
      Roles:
        - !Ref GiantSwarmCapaControllerRole
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

  GiantSwarmIAMControllerManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "giantswarm-${InstallationName}-iam-controller-policy"
      Description: "Giant Swarm managed policy for k8s cluster creation"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "iam:GetRole"
              - "iam:ListAttachedRolePolicies"
              - "iam:DetachRolePolicy"
              - "iam:DeleteRole"
              - "iam:CreateRole"
              - "iam:TagRole"
              - "iam:AttachRolePolicy"
              - "iam:PutRolePolicy"
              - "iam:ListRolePolicies"
              - "iam:DeleteRolePolicy"
              - "iam:*"
            Resource: "arn:*:iam::*:role/*"
          - Effect: "Allow"
            Action:
              - "iam:CreateInstanceProfile"
              - "iam:AddRoleToInstanceProfile"
              - "iam:RemoveRoleFromInstanceProfile"
              - "iam:DeleteInstanceProfile"
              - "iam:*"
            Resource: "arn:*:iam::*:instance-profile/*"
      Roles:
        - !Ref GiantSwarmCapaControllerRole
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

  GiantSwarmIRSAControllerManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "giantswarm-${InstallationName}-irsa-controller-policy"
      Description: "Giant Swarm managed policy for k8s cluster creation"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "iam:CreateOpenIDConnectProvider"
              - "iam:DeleteOpenIDConnectProvider"
              - "iam:ListOpenIDConnectProviderTags"
              - "iam:TagOpenIDConnectProvider"
              - "iam:UntagOpenIDConnectProvider"
              - "iam:ListOpenIDConnectProviders"
              - "iam:GetOpenIDConnectProvider"
              - "iam:UpdateOpenIDConnectProviderThumbprint"
              - "iam:RemoveClientIDFromOpenIDConnectProvider"
              - "iam:AddClientIDToOpenIDConnectProvider"
              - "cloudfront:TagResource"
              - "cloudfront:UntagResource"
              - "cloudfront:GetCloudFrontOriginAccessIdentity"
              - "cloudfront:CreateCloudFrontOriginAccessIdentity"
              - "cloudfront:DeleteCloudFrontOriginAccessIdentity"
              - "cloudfront:GetDistribution"
              - "cloudfront:CreateDistribution"
              - "cloudfront:UpdateDistribution"
              - "cloudfront:DeleteDistribution"
              - "cloudfront:ListDistributions"
              - "cloudfront:ListTagsForResource"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "s3:CreateBucket"
              - "s3:DeleteBucket"
              - "s3:DeleteObject"
              - "s3:GetBucketLogging"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:PutBucketAcl"
              - "s3:PutBucketLogging"
              - "s3:PutBucketOwnershipControls"
              - "s3:PutBucketTagging"
              - "s3:PutObjectAcl"
              - "s3:PutObject"
              - "s3:PutBucketPolicy"
              - "s3:PutBucketPublicAccessBlock"
              - "s3:PutEncryptionConfiguration"
              - "s3:PutLifecycleConfiguration"
            Resource: "arn:*:s3:::*-g8s-*"
          - Effect: "Allow"
            Action:
              - "acm:RequestCertificate"
              - "acm:AddTagsToCertificate"
              - "acm:DescribeCertificate"
              - "acm:ListCertificates"
              - "acm:DeleteCertificate"
            Resource: "*"
      Roles:
        - !Ref GiantSwarmCapaControllerRole
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

  GiantSwarmMCBootstrapManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "giantswarm-${InstallationName}-mc-bootstrap-policy"
      Description: "Giant Swarm managed policy for k8s cluster creation"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:DeleteVolume"
              - "s3:GetBucketTagging"
              - "s3:ListAllMyBuckets"
            Resource: "*"
      Roles:
        - !Ref GiantSwarmCapaControllerRole
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

  GiantSwarmNetworkTopologyControllerManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "giantswarm-${InstallationName}-network-topology-controller-policy"
      Description: "Giant Swarm managed policy for k8s cluster creation"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:CreateTags"
              - "ec2:DeleteTags"
              - "ec2:DescribeTransitGateways"
              - "ec2:DescribeTransitGatewayVpcAttachments"
              - "ec2:DescribeTransitGatewayAttachments"
              - "ec2:CreateTransitGateway"
              - "ec2:CreateTransitGatewayVpcAttachment"
              - "ec2:DeleteTransitGateway"
              - "ec2:DeleteTransitGatewayVpcAttachment"
              - "ec2:CreateManagedPrefixList"
              - "ec2:DescribeManagedPrefixLists"
              - "ec2:ModifyManagedPrefixList"
              - "ec2:GetManagedPrefixListEntries"
              - "ec2:DeleteRoute"
              - "ec2:CreateRoute"
              - "ec2:DescribeRouteTables"
              - "sns:Publish"
            Resource: "*"
      Roles:
        - !Ref GiantSwarmCapaControllerRole
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

  GiantSwarmResolverRulesOperatorManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub "giantswarm-${InstallationName}-resolver-rules-operator-policy"
      Description: "Giant Swarm managed policy for k8s cluster creation"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:CreateSecurityGroup"
              - "ec2:DeleteSecurityGroup"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeSecurityGroupRules"
              - "ec2:RevokeSecurityGroupIngress"
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ram:*"
              - "sts:AssumeRole"
              - "route53resolver:*"
              - "ec2:CreateNetworkInterface"
              - "ec2:DescribeNetworkInterfaces"
              - "ec2:DescribeAvailabilityZones"
              - "ec2:DeleteNetworkInterface"
              - "ec2:DescribeSubnets"
            Resource: "*"
      Roles:
        - !Ref GiantSwarmCapaControllerRole
      Tags:
        - Key: "installation"
          Value: !Ref InstallationName

Outputs:
  GiantSwarmCapaControllerRoleArn:
    Description: "The ARN of the IAM role for the CAPA controller"
    Value: !GetAtt GiantSwarmCapaControllerRole.Arn
